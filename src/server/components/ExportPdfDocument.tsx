import React from "react";
import { QuestionRecord } from "../../types/question";
import ReactMarkdown from "react-markdown";
import { BlockMath, InlineMath } from "react-katex";
import "katex/dist/katex.min.css";

type Props = {
  questions: QuestionRecord[];
  exportType: "worksheet" | "answer-key";
  preferences?: {
    formatting?: {
      fontSize?: number;
      showHeaders?: boolean;
      showFooters?: boolean;
    };
  };
};

function renderMarkdownWithLatex(text: string) {
  // Replace LaTeX blocks with react-katex components
  const blockRegex = /\$\$([^$]+)\$\$/g;
  const inlineRegex = /\$([^$]+)\$/g;
  let blocks: React.ReactNode[] = [];
  let lastIndex = 0;
  let match;
  let idx = 0;

  // Block equations
  while ((match = blockRegex.exec(text)) !== null) {
    if (match.index > lastIndex) {
      blocks.push(
        <ReactMarkdown key={`md-${idx++}`}>{text.substring(lastIndex, match.index)}</ReactMarkdown>
      );
    }
    blocks.push(<BlockMath key={`block-${idx++}`}>{match[1]}</BlockMath>);
    lastIndex = blockRegex.lastIndex;
  }
  if (lastIndex < text.length) {
    blocks.push(<ReactMarkdown key={`md-end`}>{text.substring(lastIndex)}</ReactMarkdown>);
  }

  // Inline equations (inside markdown)
  return blocks.map((block, i) =>
    typeof block === "string"
      ? block.replace(inlineRegex, (_, eq) => `<InlineMath math="${eq}" />`)
      : block
  );
}

export const ExportPdfDocument: React.FC<Props> = ({
  questions,
  exportType,
  preferences,
}) => {
  const fontSize = preferences?.formatting?.fontSize || 14;
  return (
    <html>
      <head>
        <meta charSet="utf-8" />
        <title>{exportType === "worksheet" ? "Worksheet" : "Answer Key"}</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" />
        <style>{`
          body { font-family: 'Arial', sans-serif; margin: 40px; font-size: ${fontSize}px; }
          h1 { text-align: center; margin-bottom: 24px; }
          .question { margin-bottom: 32px; page-break-inside: avoid; }
          .options { margin-left: 24px; }
          .answer, .explanation { margin-left: 24px; color: #2d7a2d; }
          .footer { position: fixed; bottom: 20px; left: 0; right: 0; text-align: center; font-size: 12px; color: #888; }
          .header { position: fixed; top: 20px; left: 0; right: 0; text-align: center; font-size: 16px; color: #333; }
          @media print {
            .header, .footer { position: fixed; }
            .header { top: 0; }
            .footer { bottom: 0; }
          }
        `}</style>
      </head>
      <body>
        {preferences?.formatting?.showHeaders && (
          <div className="header">{exportType === "worksheet" ? "Worksheet" : "Answer Key"}</div>
        )}
        <h1>{exportType === "worksheet" ? "Worksheet" : "Answer Key"}</h1>
        {questions.map((q, idx) => (
          <div className="question" key={q.id || idx}>
            <div>
              <b>{idx + 1}.</b>{" "}
              <span>{renderMarkdownWithLatex(q.question)}</span>
            </div>
            {q.options && q.options.length > 0 && (
              <div className="options">
                {q.options.map((opt, i) => (
                  <div key={i}>
                    <b>{String.fromCharCode(65 + i)})</b>{" "}
                    <span>{renderMarkdownWithLatex(opt)}</span>
                  </div>
                ))}
              </div>
            )}
            {exportType === "answer-key" && (
              <>
                <div className="answer">
                  <b>Answer:</b> <span>{renderMarkdownWithLatex(q.correct_answer)}</span>
                </div>
                {q.explanation && (
                  <div className="explanation">
                    <b>Explanation:</b> <span>{renderMarkdownWithLatex(q.explanation)}</span>
                  </div>
                )}
              </>
            )}
          </div>
        ))}
        {preferences?.formatting?.showFooters && (
          <div className="footer">Generated by AI Question Generator</div>
        )}
      </body>
    </html>
  );
};
